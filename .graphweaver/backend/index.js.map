{
  "version": 3,
  "sources": ["../../src/backend/index.ts", "../../src/backend/schema/user/entity.ts", "../../src/backend/schema/user/resolver.ts", "../../src/backend/entities/postgresql/user.ts", "../../src/backend/entities/mysql/todo.ts", "../../src/backend/database.ts", "../../src/backend/schema/todo/entity.ts", "../../src/backend/schema/todo/resolver.ts", "../../src/backend/schema/index.ts"],
  "sourcesContent": ["/* sydjs-test Graphweaver Project */\nimport 'reflect-metadata';\nimport Graphweaver from '@exogee/graphweaver-server';\nimport { resolvers } from './schema';\n\nconst graphweaver = new Graphweaver({\n\tresolvers,\n});\n\nexport const handler = graphweaver.handler();\n\n", "import {\n  Field,\n  GraphQLEntity,\n  ID,\n  ObjectType,\n  SummaryField,\n} from \"@exogee/graphweaver\";\nimport { User as OrmUser } from \"../../entities\";\n\n@ObjectType(\"User\")\nexport class User extends GraphQLEntity<OrmUser> {\n  public dataEntity!: OrmUser;\n\n  @Field(() => ID)\n  id!: string;\n\n  @SummaryField()\n  @Field(() => String, { nullable: true })\n  username?: string;\n\n  @Field(() => String)\n  password!: string;\n\n  @Field(() => String, { nullable: true })\n  firstName?: string;\n\n  @Field(() => String, { nullable: true })\n  lastName?: string;\n}\n", "import { createBaseResolver, Resolver } from \"@exogee/graphweaver\";\nimport { MikroBackendProvider } from \"@exogee/graphweaver-mikroorm\";\nimport { User } from \"./entity\";\nimport { User as OrmUser } from \"../../entities\";\nimport { postgresConnection } from \"../../database\";\n\n@Resolver((of) => User)\nexport class UserResolver extends createBaseResolver<User, OrmUser>(\n  User,\n  new MikroBackendProvider(OrmUser, postgresConnection)\n) {}\n", "import { Entity, PrimaryKey, Property, Unique } from '@mikro-orm/core';\nimport { BaseEntity } from '@exogee/graphweaver-mikroorm';\n\n@Entity({ tableName: 'user' })\nexport class User extends BaseEntity {\n\t@PrimaryKey({ type: 'int8' })\n\tid!: string;\n\n\t@Unique({ name: 'user_username_key' })\n\t@Property({ type: 'string', length: 255 })\n\tusername!: string;\n\n\t@Property({ type: 'string', length: 255 })\n\tpassword!: string;\n\n\t@Property({ type: 'string', length: 255, nullable: true })\n\tfirstName?: string;\n\n\t@Property({ type: 'string', length: 255, nullable: true })\n\tlastName?: string;\n}\n", "import { Entity, PrimaryKey, Property, Unique } from \"@mikro-orm/core\";\nimport { BaseEntity } from \"@exogee/graphweaver-mikroorm\";\n\n@Entity({ tableName: \"todo\" })\nexport class Todo extends BaseEntity {\n  @PrimaryKey({ type: \"int8\" })\n  id!: string;\n\n  @Property({ type: \"string\", length: 250 })\n  description!: string;\n\n  @Property({ type: \"boolean\", default: false })\n  isCompleted!: boolean;\n\n  @Property({ type: \"int8\", nullable: false })\n  userId!: string;\n}\n", "import { PostgreSqlDriver } from \"@mikro-orm/postgresql\";\nimport { MySqlDriver } from \"@mikro-orm/mysql\";\nimport { User, Todo } from \"./entities\";\n\nexport const postgresConnection = {\n  connectionManagerId: \"postgresql\",\n  mikroOrmConfig: {\n    entities: [User],\n    driver: PostgreSqlDriver,\n    dbName: \"gw\",\n    host: \"127.0.0.1\",\n    user: \"postgres\",\n    password: \"\",\n    port: 5432,\n  },\n};\n\nexport const mySQLConnection = {\n  connectionManagerId: \"mysql\",\n  mikroOrmConfig: {\n    entities: [Todo], // this will be implemented in the next step\n    driver: MySqlDriver,\n    dbName: \"gw\",\n    user: \"root\",\n    password: \"\",\n    port: 3306,\n  },\n};\n\nexport const connections = [postgresConnection];\n", "import {\n  Field,\n  GraphQLEntity,\n  ID,\n  ObjectType,\n  RelationshipField,\n} from \"@exogee/graphweaver\";\nimport { Todo as OrmTodo } from \"../../entities\";\nimport { User } from \"../user\";\n\n@ObjectType(\"Todo\")\nexport class Todo extends GraphQLEntity<OrmTodo> {\n  public dataEntity!: OrmTodo;\n\n  @Field(() => ID)\n  id!: string;\n\n  @Field(() => String)\n  description!: string;\n\n  @Field(() => String)\n  isCompleted!: string;\n\n  @RelationshipField<Todo>(() => User, { id: \"userId\" })\n  user!: User;\n}\n", "import { createBaseResolver, Resolver } from \"@exogee/graphweaver\";\nimport { MikroBackendProvider } from \"@exogee/graphweaver-mikroorm\";\nimport { Todo } from \"./entity\";\nimport { Todo as OrmTodo } from \"../../entities\";\nimport { mySQLConnection } from \"../../database\";\n\n@Resolver((of) => Todo)\nexport class TodoResolver extends createBaseResolver<Todo, OrmTodo>(\n  Todo,\n  new MikroBackendProvider(OrmTodo, mySQLConnection)\n) {}\n", "import { UserResolver } from \"./user\";\nimport { TodoResolver } from \"./todo\";\n\nexport const resolvers = [UserResolver, TodoResolver];\n"],
  "mappings": "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",
  "names": ["import_graphweaver", "import_graphweaver_mikroorm", "User", "import_core", "import_graphweaver_mikroorm", "User", "User", "import_graphweaver", "Todo", "import_graphweaver", "import_graphweaver_mikroorm", "Todo", "Graphweaver"]
}
